@use "sass:color";
@use "sass:math";
.swnr {
    .swnr-wrapper {
        min-height: 100px;
    }
    .sheetHeader {
        .header-row {
            display: flex;
            &>div {
                margin: 0.5rem;
            }
        }
        table {
            margin: 0;
        }
    }
    input[type="checkbox"] {
        margin: 0;
        height: initial;
        width: initial;
        background-color: rgba($color: #000000, $alpha: 0.05);
        border: 1px solid #7a7971;
        border-radius: 3px;
    }
    input[type="number"] {
        background-color: rgba($color: #000000, $alpha: 0.05);
        border: 1px solid #7a7971;
        border-radius: 3px;
        width: 40px;
        -moz-appearance: textfield;
        &::-webkit-outer-spin-button,
        &::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
    }
    .meter {
        width: 100px;
        height: 15px;
        background-color: white;

        .meterInner {
            height: 100%;
        }
    }
    .effort {
        .meter {
            .meterInner {
                background-color: purple;
            }
        }
    }
    .tab.inventory {
        .meter .meterInner {
            background-color: greenyellow;
        }
    }
    .tab.biography .editor .editor-content {
        min-height: 400px;
    }
    .editor .editor-content {
        min-height: 100px;
    }
    .core-stats {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: repeat(4, 1fr);
        gap: 1px 1px;
        grid-template-areas: "hp system perm-sys" "hp-label system-label perm-sys-label" "exp ac ab" "exp-label ac-label ab-label";
        .hp {
            grid-area: hp;
        }

        .system {
            grid-area: system;
        }

        .perm-sys {
            grid-area: perm-sys;
        }

        .hp-label {
            grid-area: hp-label;
        }

        .system-label {
            grid-area: system-label;
        }

        .perm-sys-label {
            grid-area: perm-sys-label;
        }

        .exp {
            grid-area: exp;
        }

        .exp-label {
            grid-area: exp-label;
        }

        .ac {
            grid-area: ac;
        }

        .ac-label {
            grid-area: ac-label;
        }

        .ab {
            grid-area: ab;
        }

        .ab-label {
            grid-area: ab-label;
        }
    }
    .saves {
        display: flex;
    }
}

.dieRoll {
    list-style-type: none;
    margin: 0px;
    .die {
        display: inline;
    }
    padding: 0px;
    .die.flop {
        text-decoration: line-through #00000098;
        color: slategrey;
    }
    .die.good {
        color: green;
    }
    .die.bad {
        color: red;
    }
}
.hpRoll {
    .status {
        div {
            display: inline;
        }
    }
}
.tab.skills ul {
    display: flex;
    list-style: none;
    flex-wrap: wrap;
    li.item.skill {
        width: calc(100% / 6);
        margin-bottom: 1em;
    }
}
.failed-validation {
    color: red;
    select,
    input,
    textarea {
        color: red;
    }
}

$highColor: white;
$shadowColor: invert($highColor);
@keyframes lowAmmoFlash {
    $glowColor: red;
    $glowSize: 6px;
    0% {
        text-shadow: 0 -1px $shadowColor, -1px 0 $shadowColor, 1px 0 $shadowColor, 0 1px $shadowColor,
            0 0 0px $glowColor;
    }
    20% {
        text-shadow: 0 -1px $shadowColor, -1px 0 $shadowColor, 1px 0 $shadowColor, 0 1px $shadowColor,
            0 0 $glowSize $glowColor;
    }
    100% {
        text-shadow: 0 -1px $shadowColor, -1px 0 $shadowColor, 1px 0 $shadowColor, 0 1px $shadowColor,
            0 0 0px $glowColor;
    }
}

@for $i from 0 through 20 {
    .ammo-#{$i} {
        text-shadow: 0 -1px $shadowColor, -1px 0 $shadowColor, 1px 0 $shadowColor, 0 1px $shadowColor;
        @if $i <= 3 {
            $time: (($i + 1) * 0.2s);
            color: #ff0000;
            animation-name: lowAmmoFlash;
            animation-duration: $time;
            animation-iteration-count: math.round(15s / $time);
        }
        @if $i >= 3 and $i <= 5 {
            $mix: percentage(($i - 2)/4);
            color: color.mix(#ffc000, #ff0000, $mix);
        }
        @if $i >= 6 and $i <= 10 {
            $mix: percentage(($i - 5)/5);
            color: color.mix(#cccf36, #ffc000, $mix);
        }
        @if $i >= 11 and $i <=16 {
            $mix: percentage(($i - 10)/6);
            color: color.mix($highColor, #cccf36, $mix);
        }
        @if $i >= 17 {
            color: $highColor;
        }
    }
}
